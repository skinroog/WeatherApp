{"version":3,"sources":["js/weather.js","js/display.js","js/location.js","js/search.js","js/script.js"],"names":["getWeather","lat","lon","apiKey","response","fetch","ok","Error","status","filterWeatherResults","json","results","temperature","main","temp","feelsLike","feels_like","description","weather","wind","speed","humidity","pressure","clouds","all","icon","displayWeather","address","clearSearchValue","inputSearch","document","querySelector","value","blur","place","changePressureUnits","backgroundImageSrc","initChangeUnitsListener","textContent","formatTemperature","toFixed","Math","round","src","getPixabyPicture","error","setBodyBackgroundImage","temperatureUnitsToggle","onclick","queryText","replace","result","hits","largeImageURL","url","Promise","resolve","img","Image","body","style","backgroundImage","onload","addWarning","message","formSearch","locationButton","warningElement","createElement","append","className","position","left","top","offsetHeight","removeWarningElement","remove","addEventListener","togglePreloader","classList","toggle","getPosition","reject","navigator","geolocation","getCurrentPosition","getUserLocation","localStorage","getItem","setItem","GeolocationPositionError","code","coords","longitude","latitude","addressComponents","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","Address","Components","cityName","countryName","getAddressDetails","components","component","kind","name","length","initSearchListeners","initInputSearch","initLocationSearch","searchInput","searchForm","ymaps","ready","init","SuggestView","event","preventDefault","searchValue","GeocoderResponseMetaData","found","Point","pos","AddressDetails","Country","CountryName","split","reverse","map","i","console","log","location","showUserLocalWeather","setCurrentDate","dateLine","currentDate","Date","date","getDate","month","getMonth","year","getFullYear","innerHTML","window","onerror","clear"],"mappings":"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","file":"script.56a4d74a.js","sourceRoot":"..\\src","sourcesContent":["export async function getWeather(lat, lon) {\n  const apiKey = '1dc9df05c4bbc873836c0d64a425d21d';\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}&lang=ru`);\n\n  if (!response.ok) throw new Error(response.status);\n\n  const weatherResults = await response.json();\n\n  return filterWeatherResults(weatherResults);\n}\n\nfunction filterWeatherResults(results) {\n  return {\n    temperature: results.main.temp,\n    feelsLike: results.main.feels_like,\n    description: results.weather[0].description,\n    wind: results.wind.speed,\n    humidity: results.main.humidity,\n    pressure: results.main.pressure,\n    clouds: results.clouds.all,\n    icon: results.weather[0].icon,\n  };\n}\n","export async function displayWeather(weather, address) {\n  clearSearchValue();\n\n  const place = document.querySelector('.app__location');\n  const temperature = document.querySelector('.weather-main__temp-value');\n  const description = document.querySelector('.weather-main__desc');\n  const feelsLike = document.querySelector('.weather-main__feels-like-value');\n\n  const wind = document.querySelector('[data-wind-value]');\n  const humidity = document.querySelector('[data-humidity-value]');\n  const pressure = document.querySelector('[data-pressure-value]');\n  const clouds = document.querySelector('[data-clouds-value]');\n\n  initChangeUnitsListener(temperature, feelsLike);\n\n  place.textContent = address;\n  temperature.textContent = formatTemperature(weather.temperature);\n  feelsLike.textContent = formatTemperature(weather.feelsLike);\n  description.textContent = weather.description;\n\n  wind.textContent = weather.wind.toFixed(1) + ' м/с';\n  humidity.textContent = Math.round(weather.humidity) + ' %';\n  pressure.textContent = changePressureUnits(weather.pressure) + ' мм рт. ст.';\n  clouds.textContent = Math.round(weather.clouds) + ' %';\n\n  function clearSearchValue() {\n    const inputSearch = document.querySelector('[data-search-input]');\n    inputSearch.value = '';\n    inputSearch.blur();\n  }\n\n  function changePressureUnits(value) {\n    return Math.round(value * 0.75006375541921);\n  }\n\n  const icon = document.querySelector('.weather-main__icon');\n  icon.src = `icons/${weather.icon}.svg`;\n\n  let backgroundImageSrc;\n\n  try {\n    backgroundImageSrc = await getPixabyPicture(weather.description);\n  } catch (error) {\n    backgroundImageSrc = 'default-background.jpg';\n  }\n\n  await setBodyBackgroundImage(backgroundImageSrc);\n}\n\nfunction initChangeUnitsListener(temperature, feelsLike) {\n  const temperatureUnitsToggle = document.querySelector('.weather-main__temp-unit');\n  temperatureUnitsToggle.textContent = 'C';\n\n  temperatureUnitsToggle.onclick = () => {\n    if (temperatureUnitsToggle.textContent === 'C') {\n      temperatureUnitsToggle.textContent = 'F';\n\n      temperature.textContent = formatTemperature(+temperature.textContent * 1.8 + 32);\n      feelsLike.textContent = formatTemperature(+feelsLike.textContent * 1.8 + 32);\n    } else {\n      temperatureUnitsToggle.textContent = 'C';\n\n      temperature.textContent = formatTemperature((+temperature.textContent - 32) / 1.8);\n      feelsLike.textContent = formatTemperature((+feelsLike.textContent - 32) / 1.8);\n    }\n  };\n}\n\nfunction formatTemperature(value) {\n  value = Math.round(value);\n  if (value > 0) return `+${value}`;\n  return value;\n}\n\nasync function getPixabyPicture(description) {\n  const queryText = description.replace(/\\s/g, '+');\n\n  const apiKey = '18227191-fcb06157a5540c6d2c9d55d91';\n  const response = await fetch(`https://pixabay.com/api/?key=${apiKey}&q=${queryText}&lang=ru&image_type=photo&category=backgrounds+nature+places&per_page=3`);\n\n  if (!response.ok) throw new Error('Image did not received');\n\n  const result = await response.json();\n\n  return result.hits[0].largeImageURL;\n}\n\nfunction setBodyBackgroundImage(url) {\n  return new Promise((resolve) => {\n    const img = new Image();\n    img.src = url;\n\n    document.body.style.backgroundImage = `url(${url})`;\n    img.onload = resolve;\n  });\n}\n\nexport function addWarning(message) {\n  const formSearch = document.querySelector('[data-search-form]');\n  const inputSearch = document.querySelector('[data-search-input]');\n  const locationButton = document.querySelector('[data-location-button]');\n\n  const warningElement = document.createElement('span');\n  formSearch.append(warningElement);\n\n  warningElement.textContent = message;\n  warningElement.className = 'warning-element';\n  warningElement.style.position = 'absolute';\n  warningElement.style.left = '0';\n  warningElement.style.top = `${formSearch.offsetHeight + 5}px`;\n\n  const removeWarningElement = () => warningElement.remove();\n  inputSearch.addEventListener('input', removeWarningElement);\n  formSearch.addEventListener('submit', removeWarningElement);\n  locationButton.addEventListener('click', removeWarningElement);\n}\n\nexport function togglePreloader() {\n  const preloaderElement = document.querySelector('[data-preloader]');\n  preloaderElement.classList.toggle('preloader--show');\n}\n","import { addWarning } from './display';\n\nfunction getPosition() {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n}\n\nexport async function getUserLocation() {\n  let position;\n\n  try {\n    if (localStorage.getItem('locationAllowed') === 'false') throw new Error('Geolocation does not allowed');\n    position = await getPosition();\n    localStorage.setItem('locationAllowed', true);\n  } catch (error) {\n    if (error instanceof GeolocationPositionError && error.code === 1 || error.message === 'Geolocation does not allowed') {\n      addWarning('Вы запретили определение геолокации. Найдите свой город\\u00A0выше!\\u00A0👆🏼');\n      localStorage.setItem('locationAllowed', false);\n    }\n    throw error;\n  }\n\n  const apiKey = 'cd0bd47c-5f52-4228-b580-3cde6b7d8c6b';\n  const response = await fetch(`https://geocode-maps.yandex.ru/1.x?geocode=${position.coords.longitude},${position.coords.latitude}&apikey=${apiKey}&format=json&results=1`);\n\n  if (!response.ok) throw new Error(response.status);\n\n  const result = await response.json();\n\n  const addressComponents = result.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.Address.Components;\n  const { cityName, countryName } = getAddressDetails(addressComponents);\n\n  return {\n    latitude: position.coords.latitude,\n    longitude: position.coords.longitude,\n    address: `${cityName}, ${countryName}`,\n  };\n}\n\nfunction getAddressDetails(components) {\n  let cityName;\n  let countryName;\n\n  for (let component of components) {\n    if (component.kind === 'country') countryName = component.name;\n    if (component.kind === 'locality') cityName = component.name;\n  }\n\n  if (!cityName) cityName = components[components.length - 1].name;\n\n  return {\n    cityName,\n    countryName,\n  };\n}\n","import { getWeather } from './weather';\nimport { getUserLocation } from './location';\nimport { displayWeather, addWarning, togglePreloader } from './display';\n\nexport function initSearchListeners() {\n  initInputSearch();\n  initLocationSearch();\n}\n\nfunction initInputSearch() {\n  const searchInput = document.querySelector('[data-search-input]');\n  const searchForm = document.querySelector('[data-search-form]');\n\n  ymaps.ready(init);\n\n  function init() {\n    let suggestView1 = new ymaps.SuggestView(searchInput);\n  }\n\n  searchForm.addEventListener('submit', async (event) => {\n    event.preventDefault();\n\n    togglePreloader();\n\n    const searchValue = searchInput.value;\n\n    if (!searchValue) {\n      togglePreloader();\n      return;\n    }\n\n    try {\n      const apiKey = 'cd0bd47c-5f52-4228-b580-3cde6b7d8c6b';\n      const response = await fetch(`https://geocode-maps.yandex.ru/1.x?geocode=${searchValue}&apikey=${apiKey}&format=json&results=1`);\n\n      if (!response.ok) throw new Error(response.status);\n\n      const result = await response.json();\n\n      if (result.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found === '0') {\n        addWarning('По вашему запросу город не найден 😞. Попробуйте снова!');\n        togglePreloader();\n        return;\n      }\n\n      const coords = result.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;\n\n      let cityName;\n\n      for (let component of result.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.Address.Components) {\n        if (component.kind === 'locality') cityName = component.name;\n      }\n\n      if (!cityName) cityName = result.response.GeoObjectCollection.featureMember[0].GeoObject.name;\n\n      const countryName = result.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.AddressDetails.Country.CountryName;\n\n      if (cityName === countryName) {\n        addWarning('Введите корректное название города 😕');\n        togglePreloader();\n        return;\n      }\n\n      const address = `${cityName}, ${countryName}`;\n\n      const weather = await getWeather(...coords.split(' ').reverse().map((i) => +i));\n\n      await displayWeather(weather, address);\n\n    } catch (error) {\n      console.log(error);\n    }\n\n    togglePreloader();\n  });\n}\n\nfunction initLocationSearch() {\n  const locationButton = document.querySelector('[data-location-button]');\n\n  locationButton.addEventListener('click', async () => {\n    togglePreloader();\n\n    try {\n      const location = await getUserLocation();\n      const weather = await getWeather(location.latitude, location.longitude);\n      await displayWeather(weather, location.address);\n    } catch (error) {\n      console.log(error);\n    }\n\n    togglePreloader();\n  });\n}\n","import { getWeather } from './weather';\nimport { getUserLocation } from './location';\nimport { initSearchListeners } from './search';\nimport { displayWeather, togglePreloader } from './display';\n\nwindow.addEventListener('load', async () => {\n  window.onerror = togglePreloader;\n  window.addEventListener('beforeunload', () => localStorage.clear());\n\n  try {\n    await showUserLocalWeather();\n    setCurrentDate();\n    initSearchListeners();\n  } catch (error) {\n    console.log(error);\n  }\n});\n\nasync function showUserLocalWeather() {\n  togglePreloader();\n\n  try {\n    const location = await getUserLocation();\n    const weather = await getWeather(location.latitude, location.longitude);\n    await displayWeather(weather, location.address);\n  } catch (error) {\n    console.log(error);\n  }\n\n  togglePreloader();\n}\n\nfunction setCurrentDate() {\n  const dateLine = document.querySelector('.app__date');\n\n  const currentDate = new Date();\n  const date = currentDate.getDate() >= 10 ? currentDate.getDate() : `0${currentDate.getDate()}`;\n  const month = currentDate.getMonth() >= 10 ? currentDate.getMonth() + 1 : `0${currentDate.getMonth() + 1}`;\n  const year = currentDate.getFullYear();\n\n  dateLine.innerHTML = `${date}.${month}.${year}`;\n}\n"]}